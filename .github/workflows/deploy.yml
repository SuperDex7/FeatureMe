name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 439964562220.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY_BACKEND: featureme-backend
  ECR_REPOSITORY_FRONTEND: featureme-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug secrets
      run: |
        echo "AWS_ACCESSKEYID length: ${#AWS_ACCESSKEYID}"
        echo "AWS_SECRETACCESSKEY length: ${#AWS_SECRETACCESSKEY}"
        if [ -n "$AWS_ACCESSKEYID" ]; then
          echo "AWS_ACCESSKEYID is set"
        else
          echo "AWS_ACCESSKEYID is NOT set"
        fi
      env:
        AWS_ACCESSKEYID: ${{ secrets.AWS_ACCESSKEYID }}
        AWS_SECRETACCESSKEY: ${{ secrets.AWS_SECRETACCESSKEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRETACCESSKEY }}
        aws-region: us-east-2

    - name: Create ECR repositories
      run: |
        aws ecr create-repository --repository-name featureme-backend --region us-east-2 || echo "Backend repository already exists"
        aws ecr create-repository --repository-name featureme-frontend --region us-east-2 || echo "Frontend repository already exists"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd FeatureMe
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd react-feature
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Deploy to EC2
      run: |
        # Send individual commands to EC2
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy FeatureMe application" \
          --parameters 'commands=["cd /home/ubuntu/FeatureMe","git pull origin main"]'
        
        # Wait a moment for the first command to complete
        sleep 10
        
        # Create docker-compose.prod.yml
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Create docker-compose.prod.yml" \
          --parameters 'commands=["cat > /home/ubuntu/FeatureMe/docker-compose.prod.yml << '\''EOF'\''
        version: \"3.9\"
        
        services:
          app:
            image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
            environment:
              - SERVER_PORT=8080
              - SPRING_PROFILES_ACTIVE=prod
              - MONGODB_URI=${{ secrets.MONGODB_URI }}
              - STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
              - AWS_REGION=${{ env.AWS_REGION }}
            expose:
              - \"8080\"
            restart: unless-stopped
        
          frontend:
            image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
            expose:
              - \"80\"
            restart: unless-stopped
        
          nginx:
            image: nginx:1.27-alpine
            depends_on:
              - app
              - frontend
            ports:
              - \"443:443\"
              - \"80:80\"
            volumes:
              - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
              - ./docker/certs:/etc/nginx/certs:ro
            restart: unless-stopped
        EOF"]'
        
        # Wait for file creation
        sleep 5
        
        # Deploy the application
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy application" \
          --parameters 'commands=["cd /home/ubuntu/FeatureMe","aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}","docker compose -f docker-compose.prod.yml down","docker compose -f docker-compose.prod.yml pull","docker compose -f docker-compose.prod.yml up -d","docker image prune -f"]'
