name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 439964562220.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY_BACKEND: featureme-backend
  ECR_REPOSITORY_FRONTEND: featureme-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRETACCESSKEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd FeatureMe
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd react-feature
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Deploy to EC2
      run: |
        # Send individual commands to EC2
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy FeatureMe application" \
          --parameters 'commands=["cd /home/ubuntu/FeatureMe","git pull origin main"]'
        
        # Wait a moment for the first command to complete
        sleep 10
        
        # Create docker-compose.prod.yml
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Create docker-compose.prod.yml" \
          --parameters 'commands=["cat > /home/ubuntu/FeatureMe/docker-compose.prod.yml << '\''EOF'\''
        version: \"3.9\"
        
        services:
          app:
            image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
            environment:
              - SERVER_PORT=8080
              - SPRING_PROFILES_ACTIVE=prod
              - MONGODB_URI=${{ secrets.MONGODB_URI }}
              - MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}
              - MONGO_USER=${{ secrets.MONGO_USER }}
              - MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
              - MONGO_CLUSTER=${{ secrets.MONGO_CLUSTER }}
              - JWT_SECRET=${{ secrets.JWT_SECRET }}
              - JWT_EXPIRATION_MS=${{ secrets.JWT_EXPIRATION_MS }}
              - STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
              - STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
              - STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
              - RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
              - AWS_ACCESSKEYID=${{ secrets.AWS_ACCESSKEYID }}
              - AWS_SECRETACCESSKEY=${{ secrets.AWS_SECRETACCESSKEY }}
              - AWS_REGION=${{ env.AWS_REGION }}
              - AWS_S3BUCKET=${{ secrets.AWS_S3BUCKET }}
              - ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
              - FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            expose:
              - \"8080\"
            restart: unless-stopped
        
          frontend:
            image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
            expose:
              - \"80\"
            restart: unless-stopped
        
          nginx:
            image: nginx:1.27-alpine
            depends_on:
              - app
              - frontend
            ports:
              - \"443:443\"
              - \"80:80\"
            volumes:
              - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
              - /etc/letsencrypt:/etc/letsencrypt:ro
            restart: unless-stopped
        EOF"]'
        
        # Wait for file creation
        sleep 5
        
        # Update nginx.conf for SSL
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Update nginx.conf for SSL" \
          --parameters 'commands=["cat > /home/ubuntu/FeatureMe/docker/nginx.conf << '\''EOF'\''
        events {}

        http {
            upstream backend {
                server app:8080;
            }

            upstream frontend {
                server frontend:80;
            }

            # Redirect HTTP to HTTPS
            server {
                listen 80;
                server_name featureme.co www.featureme.co;
                client_max_body_size 150m;
                return 301 https://$server_name$request_uri;
            }

            # HTTPS server
            server {
                listen 443 ssl http2;
                server_name featureme.co www.featureme.co;
                client_max_body_size 150m;
                # SSL certificates
                ssl_certificate /etc/letsencrypt/live/featureme.co/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/featureme.co/privkey.pem;

                # SSL configuration
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
                ssl_prefer_server_ciphers off;

                # Frontend
                location / {
                    proxy_pass http://frontend;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto https;
                }

                # Backend API
                location /api/ {
                    proxy_pass http://backend;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto https;
                }

                # WebSocket
                location /ws {
                    proxy_pass http://backend/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection \"upgrade\";
                    proxy_set_header Host $host;
                    proxy_set_header X-Forwarded-Proto https;
                }
            }
        }
        EOF"]'
        
        # Wait for nginx config update
        sleep 5
        
        # Deploy the application (use docker-compose)
        aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy application" \
          --parameters 'commands=["cd /home/ubuntu/FeatureMe","aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}","docker-compose -f docker-compose.prod.yml down --remove-orphans","docker-compose -f docker-compose.prod.yml pull","docker-compose -f docker-compose.prod.yml up -d","docker image prune -f"]'
